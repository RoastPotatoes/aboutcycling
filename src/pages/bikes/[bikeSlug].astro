---
import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";

// Fetch all bike slugs and return them for static paths
export async function getStaticPaths() {
  const bikes = await getCollection("bikes");
  return bikes.map(bike => ({
    params: { bikeSlug: bike.slug },
  }));
}

const { bikeSlug } = Astro.params;

// Fetch the specific bike data and render the content based on the slug
const bike = await getCollection("bikes").then(async bikes => {
  const selectedBike = bikes.find(bike => bike.slug === bikeSlug);
  if (!selectedBike) throw new Error(`Bike not found: ${bikeSlug}`);
  
  const { Content } = await selectedBike.render();
  return { ...selectedBike, Content };
});

// Fetch, sort, and render updates for this specific bike by filtering with bikeSlug
const updates = await getCollection("updates").then(async allUpdates => {
  const bikeUpdates = allUpdates
    .filter(update => update.data.bikeSlug === bikeSlug)
    .sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf()); // Sort by date in descending order

  return await Promise.all(
    bikeUpdates.map(async update => {
      const { Content } = await update.render();
      return { ...update, Content };
    })
  );
});
---

<PageLayout title={bike.data.title} description={bike.data.description}>
  <Container>
    <div class="animate space-y-10">
      <!-- Bike Title and Description -->
      <h1 class="animate font-semibold text-3xl text-black dark:text-white">
        {bike.data.title}
      </h1>
      <p class="text-lg text-gray-600 dark:text-gray-300 mb-6">
        {bike.data.description}
      </p>

      <!-- Render Main Bike Content -->
      <section class="space-y-6">
        <h2 class="text-2xl font-semibold text-black dark:text-white">About This Bike</h2>
        <article>
          <bike.Content />
        </article>
      </section>

      <!-- Updates Section -->
      <section>
        <h2 class="text-2xl font-semibold text-black dark:text-white">Updates</h2>
        <ul class="space-y-4 mt-4">
          {updates.length > 0 ? updates.map(update => (
            <li class="bg-gray-100 dark:bg-gray-700 p-4 rounded">
              <div class="text-sm text-gray-600 dark:text-gray-400">
                <FormattedDate date={update.data.date} />
              </div>
              <h3 class="font-medium text-black dark:text-white mt-1">
                {update.data.title}
              </h3>
              <!-- Render the Markdown Content with Images and HTML -->
              <article>
                <update.Content />
              </article>
            </li>
          )) : <p>No updates available for this bike.</p>}
        </ul>
      </section>
    </div>
  </Container>
</PageLayout>
